class TimeLimitedCache {
  constructor() {
    this.cache = new Map();
  }

  set(key, value, duration) {
    const now = Date.now();
    const existsUnexpired =
      this.cache.has(key) && this.cache.get(key).expireAt > now;

    this.cache.set(key, { value, expireAt: now + duration });
    return existsUnexpired;
  }

  get(key) {
    const now = Date.now();
    if (!this.cache.has(key)) return -1;

    const entry = this.cache.get(key);
    if (entry.expireAt <= now) {
      this.cache.delete(key); 
      return -1;
    }
    return entry.value;
  }

  count() {
    const now = Date.now();
    let cnt = 0;

    for (const [key, entry] of this.cache) {
      if (entry.expireAt > now) {
        cnt++;
      } else {
        this.cache.delete(key); 
      }
    }
    return cnt;
  }
}
